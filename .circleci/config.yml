version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.1.3
  aws-cli: circleci/aws-cli@2.0.6

workflows:
  build:
    jobs:
      - build:
          name: build_arm64
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              ignore:
                - /.*/
          machine-type: arm64
      - build:
          name: build_x64
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              ignore:
                - /.*/
          machine-type: amd64
      - merge_docker:
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              ignore:
                - /.*/
          context: circleci-soda-bot
          requires:
            - build_arm64
            - build_x64

executors:
  arm64:
    machine:
      resource_class: arm.2xlarge
      image: ubuntu-2204:current
  amd64:
    machine:
      resource_class: 2xlarge
      image: ubuntu-2204:current

jobs:
  build:
    parameters:
      machine-type:
        type: executor
    executor: << parameters.machine-type >>

    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          profile-name: default
          configure-default-region: false
      - run:
          name: Set environment
          command: |
            echo 'export AWS_REGION=us-east-1' >> $BASH_ENV
            echo 'export AWS_ROLE_ARN="$AWS_ROLE_CI_OPS"' >> $BASH_ENV
            echo "export ECR_ACCOUNT_NUM=$(echo $AWS_ROLE_CI_OPS | grep -Eo '[0-9]{12}')" >> $BASH_ENV
            echo 'export ECR_HOST=${ECR_ACCOUNT_NUM}.dkr.ecr.${AWS_REGION}.amazonaws.com' >> $BASH_ENV
            echo 'export REPOSITORY=mesg/istio/proxyv2' >> $BASH_ENV
            echo "export URI=$ECR_HOST/$REPOSITORY:$CIRCLE_TAG" >> $BASH_ENV
            if  [$(uname -m)"" = "x86_64" ]; then
              ARCH=amd64
            else
              ARCH=arm64
            fi
            echo "export ARCH=$ARCH" >> $BASH_ENV
      - run:
          name: Set AWS credentials
          command: |
            mkdir -p ~/.aws
            echo '
            [profile circleci]
            source_profile=default
            role_arn='"$AWS_ROLE_CI_OPS"'
            ' >> ~/.aws/config
      - run:
          name: build
          command: |
            BUILD_WITH_CONTAINER=1 make build_envoy
      - run:
          name: Extract build output
          command: |
            common/scripts/run.sh cp /work/bazel-bin/envoy .
            mkdir $ARCH
            cp envoy $ARCH/

            aws ecr get-login-password --region $AWS_REGION --profile circleci | docker login --username AWS --password-stdin $ECR_HOST
            docker build -t "$URI-$ARCH" .
            docker push "$URI-$ARCH"
      - store_artifacts:
          path: envoy
  merge_docker:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          profile-name: default
          configure-default-region: false
      - run:
          name: Set environment
          command: |
            echo 'export AWS_REGION=us-east-1' >> $BASH_ENV
            echo 'export AWS_ROLE_ARN="$AWS_ROLE_CI_OPS"' >> $BASH_ENV
            echo "export ECR_ACCOUNT_NUM=$(echo $AWS_ROLE_CI_OPS | grep -Eo '[0-9]{12}')" >> $BASH_ENV
            echo 'export ECR_HOST=${ECR_ACCOUNT_NUM}.dkr.ecr.${AWS_REGION}.amazonaws.com' >> $BASH_ENV
            echo 'export REPOSITORY=mesg/istio/proxyv2' >> $BASH_ENV
            echo "export URI=$ECR_HOST/$REPOSITORY:$CIRCLE_TAG" >> $BASH_ENV
      - run:
          name: Set AWS credentials
          command: |
            mkdir -p ~/.aws
            echo '
            [profile circleci]
            source_profile=default
            role_arn='"$AWS_ROLE_CI_OPS"'
            ' >> ~/.aws/config
      - run:
          name: Build docker image
          command: |
            aws ecr get-login-password --region $AWS_REGION --profile circleci | docker login --username AWS --password-stdin $ECR_HOST
            docker pull $URI-amd64
            docker pull $URI-arm64
            docker manifest create $URI $URI-amd64 $URI-arm64
            docker manifest push $URI
